tools::package.dependencies(mapproj)
tools::package.dependencies("mapproj")
library(tools)
install.packages(c("BH", "chron", "colorspace", "devtools", "dplyr", "editrules", "evaluate", "formatR", "geosphere", "ggplot2", "gtools", "highr", "httr", "igraph", "jsonlite", "KernSmooth", "knitr", "lme4", "manipulate", "markdown", "mime", "permute", "plyr", "pryr", "quantmod", "raster", "Rcpp", "RCurl", "rmarkdown", "robustbase", "roxygen2", "rspa", "rstudioapi", "scales", "shiny", "sp", "stringi", "stringr", "testthat", "vcd", "XML", "zoo"))
library(maps)
m <- map("usa",plot=FALSE)
map("usa",project="albers",par=c(39,45))
map.grid(m
)
?map
class(m)
m <- map("world", plot = FALSE)
map("world", par=c(39,45))
map.grid(m)
m <- map("world", plot = FALSE, project = "albers")
m <- map("world",  project = "albers", plot = FALSE)
map("world",  project = "albers", par=c(39,45))
map("world")
m <- map("world", plot = FALSE)
map.grid(m)
map.grid(m, project = "albers")
map.grid(m, project = "albers", par = c(90, 0))
map.grid(m, project = "albers", par = c(39, 45))
warnings()
map.grid(m, projection = "albers", par = c(39, 45))
?readLines
?read.table
x <- readLines("euler32.txt")
x
?strplit
?strsplit
source('~/Coursera/projecteuler.r')
x <- strsplit(x, " ")
head(unlist(x))
x <- unlist(x)
head(which(length(vec) == 3))
head(which(length(x) == 3))
head(length(x))
head(which(nchar(x) == 3))
head(nchar(x) == 3)
any(nchar(x) == 5)
any(nchar(x) == 4)
mul_string(1,2)
mul_string(1,10)
mul_string(1,1000)
mul_string
?is.element
is.element("2", x)
head(as.numeric(x))
source('~/Coursera/projecteuler.r')
source('~/Coursera/projecteuler.r')
?char
substr
?substr
substr("hi", 0, 2)
substr("hi", 0, 1)
substr("hi", 0, 0)
substr("hi", 1,1)
substr("hi", 2,2)
substr("12", 2,2)
source('~/Coursera/projecteuler.r')
source('~/Coursera/projecteuler.r')
is.element("7254", rslt)
rslt
is.element("39", vec)
is.element("186", vec)
source('~/Coursera/projecteuler.r')
is.element("7254", rslt)
tail(rslt)
is.element("7254", vec)
source('~/Coursera/projecteuler.r')
is.element("7254", vec)
is.element("7254", rslt)
Rslt <- unique(rslt)
is.element("7254", rslt)
sum(as.numeric(Rslt))
tail(rslt)
sharDigs("19", "515")
sharDigs("19", "55")
source('~/Coursera/projecteuler.r')
is.element("7254", rslt)
tail(rslt)
95*103
Rslt <- unique(rslt)
sum(as.numeric(Rslt))
sharDigs("95", "9785")
!TRUE
sharDigs("1", "9785")
sharDigs("9785", "9785")
source('~/Coursera/projecteuler.r')
is.element("7254", rslt)
tail(rslt)
Rslt <- NULL
Rslt <- unique(rslt)
sum(as.numeric(Rslt))
View(rslt)
source('~/Coursera/projecteuler.r')
source('~/Coursera/projecteuler.r')
source('~/Coursera/projecteuler.r')
tail(rslt)
is.element("7254", rslt)
rslt
order(rslt)
rslt[order(rslt)]
is.element("36", vec)
is.element("39", vec)
is.element("186", vec)
source('~/Coursera/projecteuler.r')
rslt
Rslt <- unique(rslt)
sum(as.numeric(Rslt))
source('~/Coursera/projecteuler.r')
x <- readLines("words.txt")
y <- strsplit(x, ",")
y <- unlist(y)
head(y)
write(y, "words.txt")
y
?write
head(y)
gsub(head(y), "\")
)
gsub(head(y), "\\")
gsub("\\", "", head(y))
gsub("\", "", head(y))
gsub("\"", "", head(y))
y <- gsub("\"", "", y)
write(y, "words.txt")
library(caret)
install.packages("caret")
10^8
x<- readLines("primes1.txt")
str(x)
head(x)
x[1]
x[2]
x[3]
x <- x[c(-1,-2)]
head(x)
x[1]
strsplit(x[1], " ")
a <- strsplit(x[1], " ")
a <- unlist(a)
a[a != ""]
as.numeric(a[a != ""])
y <- sapply(x, strsplit(x), " ")
y <- sapply(x, strsplit(split = " "))
y <- sapply(x, function(i)strsplit(split = " "))
y <- strsplit(x, " ")
head(y)
head(unlist(y))
paste0("hello", 2, ".txt")
a <- a[a!=""]
a
y <- unlist(y)
y <- y[y!=""]
tail(y)
View(y)
source('~/Coursera/quick.r')
vec[vec < 100]
vec[vec < "100"]
vec[1:100]
vec[6000000]
as.numeric(vec[6000000])
as.numeric(vec[6000000]) > 10^8
as.numeric(vec[6000000]) - 10^8
?write
write(vec, "Primes.txt")
save.image("~/Coursera/forEuler518.RData")
source('~/Coursera/quick.r')
source('~/Coursera/quick.r')
10^8 - 1
library(kernlab)
data(spam)
str(spam)
?spam
View(spam)
100*100/.1
(1/1000)*100
99*99900/100
99900 - 99*99900/100
99/(99+999)
99/(99+999)*100
?apply
?prop.table
install.packages(c("rattle", "rpart", "rpart.plot", "RColorBrewer"))
train <- read.csv("train.csv")
my_tree <- rpart(Survived ~ ., data = train, method = "class")
library(rpart)
library(rpart.plot)
library(rattle)
library(RColorBrewer)
my_tree <- rpart(Survived ~ ., data = train, method = "class")
my_tree <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = "class")
fancyRpartPlot(my_tree)
pdf("tree.pdf")
fancyRpartPlot(my_tree)
dev.off()
?rpart
my_tree <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = "class", control = rpart.control(minsplit = 50, cp = 0))
pdf("tree.pdf")
fancyRpartPlot(my_tree)
dev.off()
my_tree <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = "class")
pdf("tree1.pdf")
fancyRpartPlot(my_tree)
dev.off()
my_tree <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = "class", control = rpart.control(minsplit = 2, cp = 0))
pdf("tree2.pdf")
fancyRpartPlot(my_tree)
dev.off()
?predict
library(randomForest)
?install.package
?install.packages
install.packages("randomForest")
library(randomForest)
?randomForest
?data.table
library(data.table)
?data.table
"a":"z"
'a':'z'
?print
dim(train)
?as.data.table
as.data.table(train)
data.table(train)
substr("hello", 0,0)
substr("hello", 1,1)
?substring
substring("hello", 1,1)
substring("hello", 1)
?cumsum
cumsum(1:10)
rm(list = ls())
data(mtcars)
library(data.table)
DT <- as.data.table(mtcars)
ST
DT
class(DT)
DT[,mean(mpg, qsec)]
DT[,mean(mpg)]
DT[,.(M = mean(mpg), Q = mean(qsec), V = cumsum(wt))]
DT[,.(M = mean(mpg), Q = mean(qsec), V = cumsum(wt)), by = am]
DT[am == 0,]
DT[am == 0 & cyl == 8,]
DT[,mpg]
DT[,.mpg]
DT[,.(mpg)]
DT[,.(mpg, cyl)]
DT[,.(mpg, cyl), by = am]
DT[am == 0, mean(mpg)]
mean(DT[am == 0,]$mpg)
DT[, mean(mpg), by = cyl]
DT[, mean(mpg), by = "cyl"]
DT[, mean(mpg), by = c(cyl, am)]
DT[, mean(mpg), by = c("cyl", "am")]
savehistory("~/Coursera/hist.Rhistory")
DT[order(am, cyl),]
library(ggplot2)
ggplot(Dt, aes(x = cyl, y = mpg, color = am)) + geom_point()
ggplot(DT, aes(x = cyl, y = mpg, color = am)) + geom_point()
DT[, ggplot(aes(x = cyl, y = mpg, color = am))]
DT[, ggplot(aes(x = cyl, y = mpg, color = am)) + geom_point()]
DT[,plot]
DT[,plot(cyl, mpg)]
DT[,plot(cyl, mpg, col = am)]
DT[,plot(cyl, mpg)]
?plot
DT
DT[, mpgSum := cumcum(mpg)]
DT[, mpgSum := cumsum(mpg)]
View(DT)
View(mtcars)
DT[, c("mpgSum", "owner") := .(cumcum(mpg), "Josiah")]
DT[, c("mpgSum", "owner") := list(cumcum(mpg), "Josiah")]
DT[, c("mpgSum", "owner") := .(cumsum(mpg), "Josiah")]
DT[, c("mpgSum", "owner") := list(cumsum(mpg), "Josiah")]
View(DT)
dim(DT)
DT[, .N, by = am]
DT[, .N, by = "am"]
DT[, .N, by = c("am", "cyl")]
View(DT)
library(rpart)
install.packages("caret")
install.packages("caret", dependencies = c("Depends", "Suggests"))
library(caret)
library(mlbench)
data(Sonar)
str(Sonar)
View(Sonar)
?Sonar
set.seed(107)
inTrain <- createDataPartition(y = Sonar$Class,)
inTrain <- createDataPartition(y = Sonar$Class, p = .75, list = FALSE)
str(inTrain)
View(Sonar)
training <- Sonar[inTrain,]
testing <- Sonar[-inTrain,]
nrow(training)
nrow(testing)
()
plsFit <- train(Class ~ .,
data = training,
method = "pls",
preProc = c("center", "scale"))
str(plsFit)
summary(plsFit)
63245986 + 39088169
?args
args(mean)
sqrt(90)
sqrt(5)
4-sqrt(5)
3-sqrt(5)
5 - sqrt(5)
sqrt(6)
6 - sqrt(6)
5 - sqrt(6)
6 - 2*sqrt(6)
4 - sqrt(6)
sqrt(6/5)
sqrt(5/6)
sqrt(5)
sqrt(6)
2.45 * 0.91
sqrt(100000000)
sqrt(5)
2 * sqrt(5)
4 - sqrt(5)
4 % 2
4 %% 2
27301 %% 101
source('~/Coursera/quick.r')
source('~/Coursera/quick.r')
source('~/Coursera/quick.r')
ceil(sqrt(10))
ceiling
ceiling(sqrt(10))
sqrt(10)
floor(2*sqrt(10))
4 + sqrt(10)
7 - sqrt(10)
8 - sqrt(10)
9 - sqrt(10)
2*sqrt(10)
sqrt(10)
4 - sqrt(10)
ceiling(sqrt(n))
ceiling(sqrt(10))
ceiling(2*sqrt(10))
sqrt(10) - floor(sqrt(10))
ceiling(sqrt(10)) - sqrt(10)
a = ceiling(sqrt(10)) - sqrt(10)
5 + a
5 + a - 1
5 + a - sqrt(10)
a * 2
ceiling(2*a) - a
12.11 % 1
12.11 %% 1
source('~/Coursera/quick.r')
source('~/Coursera/quick.r')
source('~/Coursera/quick.r')
source('~/Coursera/quick.r')
source('~/Coursera/quick.r')
source('~/Coursera/quick.r')
source('~/Coursera/quick.r')
source('~/Coursera/quick.r')
source('~/Coursera/quick.r')
source('~/Coursera/quick.r')
source('~/Coursera/quick.r')
source('~/Coursera/quick.r')
g(4,11)
g(4,12)
g(4,13)
g(4,10)
source('~/Coursera/quick.r')
g(4,11)
g(4,10)
source('~/Coursera/quick.r')
g(4,10)
source('~/Coursera/quick.r')
g(4,10)
source('~/Coursera/quick.r')
source('~/Coursera/quick.r')
g(4,10)
debugSource('~/Coursera/quick.r')
g(4,10)
source('~/Coursera/quick.r')
g(4,10)
source('~/Coursera/quick.r')
g(4,10)
source('~/Coursera/quick.r')
g(4,10)
source('~/Coursera/quick.r')
g(4,10)
g(4,9)
3*sqrt(10)
g(sqrt(10),9)
floor(9 - 2*sqrt(10))
9 - floor(9 - 2*sqrt(10))
9 - floor(9 - 2*sqrt(10))
10 - floor(10 - 2*sqrt(10))
11 - floor(11 - 2*sqrt(10))
g(sqrt(10),9)
floor(9 - 2*sqrt(10))
x = 9
a = sqrt(10)
floor(x - 2*a) + 2
floor(x - 2*a)
g(4,11)
x = 11
a = 4
floor(x - 2*a)
sqrt(1000)
3 * sqrt(1000)
sqrt(1000000000)
3 * sqrt(1000000000)
4 * sqrt(1000000000)
sqrt(90)
90 / sqrt(90)
39/10
sqrt(10010000)
10*sqrt(10010000)
5*sqrt(10010000)
sqrt(10)
sqrt(90)
source('~/Coursera/isprime.r')
a = 10000000:10010000
isprime(a)
lengthwhich(isprime(a))
length(which(isprime(a)))
(which(isprime(a)))[1]
a[20]
getwd()
setwd("../GitHub/R_Math")
source('~/GitHub/R_Math/Gaussian_rm_cols.R')
A = as.matrix(c(12,34,12,32,45,67,89,43,21,34,56,78,89,43,55,32))
A = as.matrix(c(12,34,12,32,45,67,89,43,21,34,56,78,89,43,55,32), 4, 4)
A
A = as.matrix(c(12,34,12,32,45,67,89,43,21,34,56,78,89,43,55,32), nrow = 4)
A
A = matrix(c(12,34,12,32,45,67,89,43,21,34,56,78,89,43,55,32), nrow = 4)
A
Gaussian_rref(A)
Gaussian_rref-Adj(A)
Gaussian_rref-adj(A)
Gaussian_rref_adj(A)
B = inv_mat(A)
B*A
A*B
A**B
A%*%B
C = A%*%B
round(C)
nrow(A)
ncol(A)
D = A
D[,5]
D[,5] <- c(1,4,3,7)
cbind(D, c(1,4,3,7))
D = cbind(D, c(1,4,3,7))
D
Gaussian_rref(D)
?round
round(C, 2)
round(C, digits = 2)
D
Gaussian_rref(D)
a = NULL
a <- c(a, 3)
a
3:1
2 == 3 - 1
D[2, 3:5]
D[2, 3:5] * 1:3
?reverse
a = D[2, 3:5]
a[-1]
a[:]
a[order(a)]
a[3:1]
a
a[3:]
source('~/GitHub/R_Math/Gaussian_rm_cols.R')
my_solve(D)
D
Gaussian_rref(D)
A
a my_solve(D)
a = my_solve(D)
A %*% a
D
source('~/GitHub/R_Math/Gaussian_rm_cols.R')
a = my_solve(D)
A %*% a
D
my_solve(A)
D[3,2] <- 0
D
a = my_solve(D)
a
D[,1:4]%*%a
source('~/GitHub/R_Math/Gaussian_rm_cols.R')
a = my_solve(D)
a
round(a)
round(a, 2)
